<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MaxVolume = 1;
Volume = 1;
Muted = false;
Paused = false;

group = 0;//ariable_local_get("group");
instance = 0;//variable_local_get("instance");
sound = 0;//variable_local_get("sound");
mouseover = false;
iscopy = false;
//if(!variable_local_exists("name"))
name = "";
//if(!variable_local_exists("file"))
file = "Select Sound";
//if(!variable_local_exists("xD"))
xD = "";
//if(!variable_local_exists("looped"))
looped="";
doppler=0;//variable_local_get("doppler");
minmax =0;//variable_local_get("minmax");
//if(!variable_local_exists("_min"))
_min = 50;
//if(!variable_local_exists("_max"))
_max = 100;
//if(!variable_local_exists("SoundVolume"))
SoundVolume =.5;
//if(!variable_local_exists("streamed"))
streamed = "";
InstFreq = 0;
selected =false;
//if(!variable_local_exists("effects"))
effects = 0;//se_none;
//if(!variable_local_exists("path"))
path = path_add();

if(file &lt;&gt; "") alarm[0] = 1;


    m_effects[0] = 0;
    m_NumEffect = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(iscopy) exit;
FMODInstanceStop(instance);
FMODSoundFree(sound);

var i;
for (i = 0; i&lt;m_NumEffect; i+=1)
    FMODEffectFree(m_effects[i]);
m_NumEffect =0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    var fn;
    fn = file
    if(fn == "") exit;
    FMODInstanceStop(instance);
    instance = 0;
    if(!iscopy) FMODSoundFree(sound);
    
    iscopy = false;  
    file = filename_name(fn);     
    sound = FMODSoundAdd(fn, (xD=="3d"),(streamed == "Streamed"));
 //show_message(FMODErrorStr(FMODGetLastError()))
    FMODSoundSetEffects(sound, effects);
    FMODSoundSetGroup(sound,group);
    FMODSoundSetMaxVolume(sound,SoundVolume);
    if(xD=="3d") 
    {
        FMODSoundSet3dDopplerMax(sound,doppler);
        if(minmax) FMODSoundSet3dMinMaxDistance(sound,_min,_max);
    }    

    if(looped = "")
    {
        if (xD = "2d")
            instance = FMODSoundPlay(sound,0);
        else
            instance = FMODSoundPlay3d(sound,x,y,0,0);
    }
    else
    {
        if (xD = "2d")
            instance = FMODSoundLoop(sound,0);
        else
            instance = FMODSoundLoop3d(sound,x,y,0,0);
    }
//show_message(FMODErrorStr(FMODGetLastError()))
    InstFreq = FMODInstanceGetFrequency(instance);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(xD=="3d") FMODInstanceSet3dPosition(instance,x,y,20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!mouseover) exit;
if(keyboard_check(ord('0'))) exit;
if(keyboard_check(ord('1'))) exit;
if(keyboard_check(ord('2'))) exit;
if(keyboard_check(ord('3'))) exit;
if(keyboard_check(ord('4'))) exit;

if(keyboard_check_pressed(ord('C'))) selected = !selected;

    if(keyboard_check(vk_left))
        {
                MaxVolume = max(0,min(1,MaxVolume-.005));
                Volume=MaxVolume;
                FMODInstanceSetVolume(instance,Volume);
        }
    else if(keyboard_check(vk_right))
        {
                MaxVolume = max(0,min(1,MaxVolume+.005));
                Volume=MaxVolume;
                FMODInstanceSetVolume(instance,Volume);
        }
    else if(keyboard_check_pressed(ord('P')))
        {FMODInstanceSetPaused(instance,!FMODInstanceGetPaused(instance))}
    else if(keyboard_check_pressed(ord('M')))
        {FMODInstanceSetMuted(instance,!FMODInstanceGetMuted(instance))}
    else if(keyboard_check_pressed(ord('F')))
        if(Volume &lt;&gt;0)
        {
            FMODInstanceFadeVolume(instance,Volume,0,room_speed*2, "with("+string(id)+") {Volume = other.instvol;}");
        }
        else
        {
            FMODInstanceFadeVolume(instance,Volume,MaxVolume,room_speed*2, "with("+string(id)+") {Volume = other.instvol;}");
        }
    else if(keyboard_check_pressed(ord('B')))
        if(FMODInstanceGetFrequency(instance) = InstFreq)
        {
            FMODInstanceFadeFrequency(instance,InstFreq/2,room_speed*2);
        }
        else
        {
            FMODInstanceFadeFrequency(instance,InstFreq,room_speed*2);
        }
    else if(keyboard_check_pressed(ord('A')))
        if(FMODInstanceGetPan(instance) = 0)
        {
            FMODInstanceFadePan(instance,-1,room_speed*2);
        }
        else if(FMODInstanceGetPan(instance) = -1)
        {
            FMODInstanceFadePan(instance,1,room_speed*2);
        }
        else if(FMODInstanceGetPan(instance) = 1)
        {
            FMODInstanceFadePan(instance,0,room_speed*2);
        }



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(!mouseover) exit;
if(selected) selected = false;
var opt;

opt = show_menu ("--Options--|-|Set File|-|Play|Loop|-|Stop|-|Create Another Instance|-|Define a path|-|Set Position|-|Add Effect While Playing|Remove Last Effect|-|Set 3d Pan Level|Set 3d Spread|-|Set MOD/S3M/XM/IT/MIDI Channel Volume|-|Set Pitch",0);
if(opt = 1)
{
    var fn;
    fn = get_open_filename("All File (*.*)|*.*",file );
    if(fn == "") exit;
    FMODInstanceStop(instance);
    instance = 0;
    if(!iscopy) FMODSoundFree(sound);
    group = (max(0,min(4,get_integer("What group?#0-Master, 1-Priority, 2-Effects,#3-Ambient Music, 4-Ambient Effects",group))))
    SoundVolume = (max(0,min(100,get_integer("What Volume? 0-100 (I'll convert to 0-1)",SoundVolume*100)))) /100;
    name = get_string("Name:",name);
    streamed = "";
    if(show_message_ext("Stream Sound?","Stream","","No") == 1) streamed = "Streamed"
    
    xD = "2d"
    if(show_message_ext("3D Sound?","3D","","2D") == 1) xD = "3d"

    if(xD="3d")
    {
        doppler = get_integer("Doppler? 0-None, 1-Normal, 5-Max",doppler);
        minmax = (show_message_ext("Distance Relative?","Yes","","No") == 1)
        if(minmax)
        {
            _min = get_integer("Min distance (when sound is max volume and starts fading)",_min);
            _max = get_integer("Max distance (when sound ends fading and is 0)",_max);
        }
    }
    
    iscopy = false;  
    file = filename_name(fn); 
    var password;
    password = "";
    password = get_string("Enter password: leave blank for none",password);
  
    FMODSetPassword(password);
    sound = FMODSoundAdd(fn,(xD=="3d"),(streamed == "Streamed"));
    var ef,effects;
    effects = se_none;
    ef = (show_message_ext("Add GM Type Effect(s)?","Yes","","No") == 1)
    while(ef)
    {
        ef = get_integer("GM Effects: 0-Done, 1-chorus, 2-compressor, 3-echo#4-equalizer, 5-flanger, 6-reverb, 7-gargle",0);
        if(ef == 1) effects = (effects | se_chorus);
        if(ef == 2) effects = (effects | se_compressor);
        if(ef == 3) effects = (effects | se_echo);
        if(ef == 4) effects = (effects | se_equalizer);
        if(ef == 5) effects = (effects | se_flanger);
        if(ef == 6) effects = (effects | se_reverb);
        if(ef == 7) effects = (effects | se_gargle);
    }
    ef = (show_message_ext("Add FMOD Type Effect(s)?","Yes","","No") == 1)
    var ct;
    ct = 0;
    while(ef and ct &lt;10)
    {
        ef = get_integer("FMOD Effects: 0 When DONE#FMOD_DSP_TYPE_MIXER-1, FMOD_DSP_TYPE_OSCILLATOR-2, FMOD_DSP_TYPE_LOWPASS-3#FMOD_DSP_TYPE_ITLOWPASS-4, FMOD_DSP_TYPE_HIGHPASS-5, FMOD_DSP_TYPE_ECHO-6#FMOD_DSP_TYPE_FLANGE-7, FMOD_DSP_TYPE_DISTORTION-8, FMOD_DSP_TYPE_NORMALIZE-9#FMOD_DSP_TYPE_PARAMEQ-10, FMOD_DSP_TYPE_PITCHSHIFT-11, FMOD_DSP_TYPE_CHORUS-12#FMOD_DSP_TYPE_REVERB-13, FMOD_DSP_TYPE_VSTPLUGIN-14, FMOD_DSP_TYPE_WINAMPPLUGIN-15#FMOD_DSP_TYPE_ITECHO-16, FMOD_DSP_TYPE_COMPRESSOR-17, FMOD_DSP_TYPE_SFXREVERB-18#FMOD_DSP_TYPE_LOWPASS_SIMPLE-19",0);
        if(ef &gt; 0 and ef &lt;20 ) FMODSoundAddEffect(sound,ef,ct);
        ct +=1;
    }
    FMODSoundSetEffects(sound, effects);
    FMODSoundSetGroup(sound,group);
    FMODSoundSetMaxVolume(sound,SoundVolume);
    if(xD=="3d") 
    {
            FMODSoundSet3dDopplerMax(sound,doppler);
        if(minmax) FMODSoundSet3dMinMaxDistance(sound,_min,_max);
    }    
    MaxVolume = 1;
    Volume = 1;
}
if(opt = 2)
{
    looped = ""
    FMODInstanceStop(instance);
    
var i;
for (i = 0; i&lt;m_NumEffect; i+=1)
    FMODEffectFree(m_effects[i]);
m_NumEffect =0;

    if (xD = "2d")
        instance = FMODSoundPlay(sound);
    else
        instance = FMODSoundPlay3d(sound,x,y,20);
    InstFreq = FMODInstanceGetFrequency(instance);
}
if(opt = 3)
{
    var t;
    t = get_integer("How many times? -1 forever, 0 no loop (play once), 1 once (play twice)",-1);
    looped = "Looped"
    FMODInstanceStop(instance);
var i;
for (i = 0; i&lt;m_NumEffect; i+=1)
    FMODEffectFree(m_effects[i]);
m_NumEffect =0;

    if (xD = "2d")
        instance = FMODSoundLoop(sound);
    else
        instance = FMODSoundLoop3d(sound,x,y,20);
    InstFreq = FMODInstanceGetFrequency(instance);
    FMODInstanceSetLoopCount(instance, t);
}
if(opt = 4)
{
    looped = ""
    FMODInstanceStop(instance);
    var i;
    for (i = 0; i&lt;m_NumEffect; i+=1)
        FMODEffectFree(m_effects[i]);
    m_NumEffect =0;
}
if(opt = 5)
{
    if(sound = 0) {show_message("No sound to instanciate") exit;}
    var ct;
    ct = 0;
    
    if(!iscopy) iscopy=-1;
    
    with(DemoSoundObj)
    {
        if(sound = other.sound and sound &lt;&gt; 0)
        {
            ct+=1;
        }
    }
    with(instance_copy(false))
    {
        looped = "";
        instance = 0;
        iscopy = ct+1;
        selected = true;
    }
}
if(opt = 6)
{
    var s;
    s = get_integer("Enter the speed... 100 is 1 pixel per second (deafult is 10 pixels per second)",1000);
    window_set_cursor(cr_cross);
    show_message("Now click on the screen to define a path. Each click is a path point. Press ENTER when done.");
   
    path_clear_points(path);
    path_add_point(path,x,y,100);
    while(!keyboard_check_direct(vk_enter))
    {
        io_handle();
        screen_redraw();
        if(mouse_check_button_pressed(mb_left))
        {
            //path_add_point(path,window_view_mouse_get_x(0),window_view_mouse_get_y(0),100);
            path_add_point(path,mouse_x,mouse_y,100);

            path_set_kind(path,1)
            path_set_precision(path,5);
            mouse_clear(mb_left);
        }
    }
    path_add_point(path,x,y,100);
    path_start(path,s/100/room_speed,2,true);
    show_message("Done")
}
if(opt = 7)
{
    if(!FMODInstanceIsPlaying(instance)) exit;
    FMODInstanceSetPosition(instance,
    get_integer("Enter to position to go to in the sound. (0-100) I will convert to 0-1.",0)/100
    )
}
if(opt = 8)
{
    if(!FMODInstanceIsPlaying(instance)) exit;
    var eff;
    eff = get_integer("FMOD Effects: NONE - 0, FMOD_DSP_TYPE_MIXER-1, FMOD_DSP_TYPE_OSCILLATOR-2, FMOD_DSP_TYPE_LOWPASS-3#FMOD_DSP_TYPE_ITLOWPASS-4, FMOD_DSP_TYPE_HIGHPASS-5, FMOD_DSP_TYPE_ECHO-6#FMOD_DSP_TYPE_FLANGE-7, FMOD_DSP_TYPE_DISTORTION-8, FMOD_DSP_TYPE_NORMALIZE-9#FMOD_DSP_TYPE_PARAMEQ-10, FMOD_DSP_TYPE_PITCHSHIFT-11, FMOD_DSP_TYPE_CHORUS-12#FMOD_DSP_TYPE_REVERB-13, FMOD_DSP_TYPE_VSTPLUGIN-14, FMOD_DSP_TYPE_WINAMPPLUGIN-15#FMOD_DSP_TYPE_ITECHO-16, FMOD_DSP_TYPE_COMPRESSOR-17, FMOD_DSP_TYPE_SFXREVERB-18#FMOD_DSP_TYPE_LOWPASS_SIMPLE-19",0);
    if(eff = 0) exit;
    m_effects[m_NumEffect] = FMODInstanceAddEffect(instance,eff);
    m_NumEffect +=1;
}
if(opt = 9)
{
    if(!FMODInstanceIsPlaying(instance)) exit;
    if(m_NumEffect&lt;=0) exit;
    FMODEffectFree(m_effects[m_NumEffect-1]);
    m_NumEffect -=1;
}
if(opt = 10)
{
    FMODInstanceSet3DPanLevel(instance,max(0,min(1,get_integer("Enter 3d Pan Level (0-No longer listener relative, up to 100 Fully listener relative)#I'll devide by 100 to make it compatible with the function",0)/100)))
}

if(opt = 11)
{
    FMODInstanceSet3DSpread(instance,max(0,min(360,get_integer("Enter 3d Spread (0 (default, directional mono sounding), up to 180 (Full spread multichannel) up to 360 (reverse directional mono sounding))",0))))
}

if(opt = 12)
{
    var numch; numch = FMODSoundGetMusicNumChannels(sound)
    if(numch==0) 
    {
        show_message("Sound does not support channels or sound not loaded")
        exit;
    }
    var ch; ch = max(0, min(numch-1,get_integer("Enter the channel to change volume (0-" + string(numch-1) + ")",0)))
    var v; v = FMODSoundGetMusicChannelVolume(sound,ch)*100;
    FMODSoundSetMusicChannelVolume(sound, ch, min(100,max(0,get_integer("Enter the volume, 0-100, I'll convert to 0-1, current volume for the channels is default",v)))/100)
}
if(opt = 13)
{
    if(!FMODInstanceIsPlaying(instance)) exit;
    var p; p = FMODInstanceGetPitch(instance)
    p = real(get_string("Enter pitch (+-) 0 to 10", string(p)))
    FMODInstanceSetPitch(instance,p);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouseover = false;

if(!global.ShowDetails) exit;
var ds;
ds = max(16,_max);
if(y+ds&lt;view_yview[view_current]) exit;
if(x+ds&lt;view_xview[view_current]) exit;
if(y-ds&gt;view_yview[view_current]+view_hview[view_current]) exit;
if(x-ds&gt;view_xview[view_current]+view_wview[view_current]) exit;

if(selected)
{
x = mouse_x;
y = mouse_y;
draw_rectangle(x-20,y-20,x+20,y+20,true);
}

if(minmax)
{
    draw_set_alpha(.3);
    draw_circle_color(x,y,_max,c_white,c_lime,false);
    draw_circle_color(x,y,_min,c_lime,c_lime,false);
    draw_set_alpha(1);
}
draw_set_font(demofont);
draw_set_halign(fa_center);
xx = x-75;
yy = y;
if(group = 0)
{
draw_set_color(c_maroon);
draw_circle(x,y,16,false);
draw_text(x,y+14,"Master");
}
else if(group = 1)
{
draw_set_color(c_red);
draw_text(x,y+14,"Priority");
}
else if(group = 2)
{
draw_set_color(c_green);
draw_text(x,y+14,"Effects");
}
else if(group = 3)
{
draw_set_color(c_blue);
draw_text(x,y+14,"AmbientMusic");
}
else if(group = 4)
{
draw_set_color(c_yellow);
draw_text(x,y+14,"AmbientEffects");
}



draw_circle(x,y,16,false);

draw_set_halign(fa_left);

yy+=28;
draw_set_color(c_black);
draw_healthbar(xx,yy,xx+150,yy+16,MaxVolume *100,c_maroon,c_blue,c_blue,0,true,true)
var groupvol;
groupvol = global.volumes[0];
if(group) groupvol *= global.volumes[group];
draw_healthbar(xx+1,yy+1,xx+149,yy+15,Volume * groupvol*100,c_maroon,c_lime,c_lime,0,false,false)
draw_healthbar(xx+1,yy+6,xx+149,yy+10,SoundVolume *Volume* groupvol*100,c_maroon,c_red,c_red,0,false,false)
draw_circle(xx+75+FMODInstanceGetPan(instance)*75,yy+10,6,false);

var pitch;
pitch = global.pitches[0];
if(group) pitch *= global.pitches[group];
var fr;
fr = FMODInstanceGetFrequency(instance);
DrawFreq(xx,yy,150,16, fr*(pitch/1));


draw_set_alpha(.3);

/*
if(global.paused[0])
{
draw_rectangle_color(xx,yy,xx+150,yy+16,c_blue,c_blue,c_blue,c_blue,false);
draw_text(xx,yy,"M   Paused")
}

if(global.paused[group] and group &lt;&gt;0)
{
draw_rectangle_color(xx,yy,xx+150,yy+16,c_blue,c_blue,c_blue,c_blue,false);
draw_text(xx,yy," G  Paused")
}
*/

if(FMODInstanceGetPaused(instance) or (global.paused[group]))
{
draw_rectangle_color(xx,yy,xx+150,yy+16,c_blue,c_blue,c_blue,c_blue,false);
draw_text(xx,yy,"Paused")
}
/*
if(global.muted[0])
{
draw_rectangle_color(xx,yy,xx+150,yy+16,c_blue,c_red,c_red,c_blue,false);
draw_text(xx,yy,"            M   Muted")
}

if(global.muted[group] and group &lt;&gt;0)
{
draw_rectangle_color(xx,yy,xx+150,yy+16,c_blue,c_red,c_red,c_blue,false);
draw_text(xx,yy,"             G  Muted")
}
*/
if(FMODInstanceGetMuted(instance) or (global.muted[group]))
{
draw_rectangle_color(xx,yy,xx+150,yy+16,c_blue,c_red,c_red,c_blue,false);
draw_text(xx,yy,"              Muted")
}

draw_set_halign(fa_center);


draw_set_alpha(1);
yy+=16;
if(name &lt;&gt; "")
{
    draw_text(x,yy,name)
    yy+=12;
}
if(file &lt;&gt; "")
{
    draw_text(x,yy,file )
    yy+=12;
}
if(xD &lt;&gt; "")
{
    draw_text(x,yy,xD )
    yy+=12;
}
if(looped&lt;&gt; "")
{
    var t;
    t = FMODInstanceGetLoopCount(instance);
    var tx;
    tx = "...Forever";
    if(t &lt;&gt; -1) tx = "...Remaining "+string(t);
    draw_text(x,yy,looped + tx)
    yy+=12;
}
if(doppler&lt;&gt; 0)
{
    draw_text(x,yy,"Doppler: " +string(doppler))
    yy+=12;
}
if(FMODInstanceIsPlaying(instance))
{
    draw_text(x,yy,"Playing...(" + string(FMODInstanceGetPosition(instance) *100) +"%) ("  + string(FMODInstanceSoundGetLength(instance)) +"ms)")
    yy+=12;
}
else
{
    draw_text(x,yy,"Stopped ("  + string(FMODSoundGetLength(sound)) +"ms)")
    yy+=12;
}
if(streamed&lt;&gt; "")
{
    draw_text(x,yy,streamed)
    yy+=12;
}

if(fr)
{
    draw_text(x,yy,"Freq: " + string(fr*pitch));
    yy+=12;
}
if(iscopy )
{
    draw_text(x,yy,"Instance: " + string(iscopy));
    yy+=12;
}
if(iscopy = -1 )
{
    draw_text(x,yy,"Instance: 1");
    yy+=12;
}
draw_text(x,yy,"Audibility: " + string(FMODInstanceGetAudibility(instance)));
yy+=12;

if(minmax)
{
    if(_min &lt;16)
        draw_circle(x,y,_min,true);
    if(_max &lt; 16)
        draw_circle(x,y,_max,true);
}


if(point_distance(mouse_x,mouse_y,x,y)&lt; max(16,_min))
{
    draw_set_valign(fa_middle);   
    draw_text(x,y-38,"Click to edit#(&lt;-V-&gt;)(P)(M)(F)(B)(A)#(C) to change position")
    mouseover=true;
    window_set_cursor(cr_handpoint);
    DemoControlerObj.alarm[0] = 5;
    DrawSnapshotInstance(instance,x-100,y-150,200,75)
}    

draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_set_alpha(1);
draw_path(path,x,y,true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
