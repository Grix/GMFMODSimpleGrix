<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    m_effects[0,0] = 0;
    m_effects[1,0] = 0;
    m_effects[2,0] = 0;
    m_effects[3,0] = 0;
    m_effects[4,0] = 0;
    m_NumEffect[0] = 0;
    m_NumEffect[1] = 0;
    m_NumEffect[2] = 0;
    m_NumEffect[3] = 0;
    m_NumEffect[4] = 0;
    
    alarm[1] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(show_question("This new version has parameterized effect and Voice Spectrum Analysis. Want to see that demo?") == 1)
{
    instance_destroy();
    room_goto(DemoEffectRm)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_cursor(cr_default);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
FMODUpdate();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_wview[0] *= 1.1;
view_hview[0] *= 1.1;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_wview[0] /= 1.1;
view_hview[0] /= 1.1;

view_wview[0] = max(800,view_wview[0])
view_hview[0] = max(600,view_hview[0])
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check(ord('0')))
{
    if(keyboard_check(vk_left))
        {
                global.MasterMaxVolume = max(0,min(1,global.MasterMaxVolume-.005));
                FMODGroupSetVolume(0,global.MasterMaxVolume);
        }
    else if(keyboard_check(vk_right))
        {
                global.MasterMaxVolume = max(0,min(1,global.MasterMaxVolume+.005));
                FMODGroupSetVolume(0,global.MasterMaxVolume);
        }
    else if(keyboard_check_pressed(ord('P')))
        {FMODGroupSetPaused(0,!FMODGroupGetPaused(0));}
    else if(keyboard_check_pressed(ord('M')))
        {FMODGroupSetMuted(0,!FMODGroupGetMuted(0));}
    else if(keyboard_check_pressed(ord('F')))
        if(FMODGroupGetVolume(0) &lt;&gt; 0)
        {
            FMODGroupFadeVolume(0,0,room_speed*2);
        }
        else
        {
            FMODGroupFadeVolume(0,global.MasterMaxVolume,room_speed*2);
        }
    else if(keyboard_check_pressed(ord('B')))
        if(FMODGroupGetPitch(0) = 1)
        {
            FMODGroupFadePitch(0,.5,room_speed*2);
        }
        else
        {
            FMODGroupFadePitch(0,1,room_speed*2);
        }
    else if(keyboard_check_pressed(ord('A')))
        if(global.pans[0] = 1)
        {
            FMODGroupFadePan(0,global.pans[0],0,room_speed*2, "global.pans[0] = curpan; global.pans[1] = curpan; global.pans[2] = curpan; global.pans[3] = curpan;  global.pans[4] = curpan");
        }
        else if(global.pans[0] = -1)
        {
            FMODGroupFadePan(0,global.pans[0],1,room_speed*2, "global.pans[0] = curpan; global.pans[1] = curpan; global.pans[2] = curpan; global.pans[3] = curpan;  global.pans[4] = curpan");
        }
        else if(global.pans[0] = 0)
        {
            FMODGroupFadePan(0,global.pans[0],-1,room_speed*2, "global.pans[0] = curpan; global.pans[1] = curpan; global.pans[2] = curpan; global.pans[3] = curpan;  global.pans[4] = curpan");
        }

}
if(keyboard_check(ord('1')))
{
    if(keyboard_check(vk_left))
        {
                global.PriorityMaxVolume = max(0,min(1,global.PriorityMaxVolume -.005));
                FMODGroupSetVolume(1,global.PriorityMaxVolume );
        }
    else if(keyboard_check(vk_right))
        {
                global.PriorityMaxVolume = max(0,min(1,global.PriorityMaxVolume +.005));
                FMODGroupSetVolume(1,global.PriorityMaxVolume );
        }
    else if(keyboard_check_pressed(ord('P')))
        {FMODGroupSetPaused(1,!FMODGroupGetPaused(1));}
    else if(keyboard_check_pressed(ord('M')))
        {FMODGroupSetMuted(1,!FMODGroupGetMuted(1));}
    else if(keyboard_check_pressed(ord('F')))
        if(FMODGroupGetVolume(1) = global.PriorityMaxVolume )
        {
            FMODGroupFadeVolume(1,0,room_speed*2);
        }
        else
        {
            FMODGroupFadeVolume(1,global.PriorityMaxVolume ,room_speed*2);
        }
    else if(keyboard_check_pressed(ord('B')))
        if(FMODGroupGetPitch(1) = 1)
        {
            FMODGroupFadePitch(1,.5,room_speed*2);
        }
        else
        {
            FMODGroupFadePitch(1,1,room_speed*2);
        }
    else if(keyboard_check_pressed(ord('A')))
        if(global.pans[1] = 1)
        {
            FMODGroupFadePan(1,global.pans[1],0,room_speed*2, "global.pans[1] = curpan");
        }
        else if(global.pans[1] = -1)
        {
            FMODGroupFadePan(1,global.pans[1],1,room_speed*2, "global.pans[1] = curpan");
        }
        else if(global.pans[1] = 0)
        {
            FMODGroupFadePan(1,global.pans[1],-1,room_speed*2, "global.pans[1] = curpan");
        }

}
if(keyboard_check(ord('2')))
{
    if(keyboard_check(vk_left))
        {
                global.EffectsMaxVolume = max(0,min(1,global.EffectsMaxVolume -.005));
                FMODGroupSetVolume(2,global.EffectsMaxVolume );
        }
    else if(keyboard_check(vk_right))
        {
                global.EffectsMaxVolume = max(0,min(1,global.EffectsMaxVolume +.005));
                FMODGroupSetVolume(2,global.EffectsMaxVolume );
        }
    else if(keyboard_check_pressed(ord('P')))
        {FMODGroupSetPaused(2,!FMODGroupGetPaused(2));}
    else if(keyboard_check_pressed(ord('M')))
        {FMODGroupSetMuted(2,!FMODGroupGetMuted(2));}
    else if(keyboard_check_pressed(ord('F')))
        if(FMODGroupGetVolume(2) = global.EffectsMaxVolume )
        {
            FMODGroupFadeVolume(2,0,room_speed*2);
        }
        else
        {
            FMODGroupFadeVolume(2,global.EffectsMaxVolume ,room_speed*2);
        }
    else if(keyboard_check_pressed(ord('B')))
        if(FMODGroupGetPitch(2) = 1)
        {
            FMODGroupFadePitch(2,.5,room_speed*2);
        }
        else
        {
            FMODGroupFadePitch(2,1,room_speed*2);
        }
    else if(keyboard_check_pressed(ord('A')))
        if(global.pans[2] = 1)
        {
            FMODGroupFadePan(2,global.pans[2],0,room_speed*2, "global.pans[2] = curpan");
        }
        else if(global.pans[2] = -1)
        {
            FMODGroupFadePan(2,global.pans[2],1,room_speed*2, "global.pans[2] = curpan");
        }
        else if(global.pans[2] = 0)
        {
            FMODGroupFadePan(2,global.pans[2],-1,room_speed*2, "global.pans[2] = curpan");
        }


}
if(keyboard_check(ord('3')))
{
    if(keyboard_check(vk_left))
        {
                global.AmbientMusicMaxVolume = max(0,min(1,global.AmbientMusicMaxVolume -.005));
                FMODGroupSetVolume(3,global.AmbientMusicMaxVolume );
        }
    else if(keyboard_check(vk_right))
        {
                global.AmbientMusicMaxVolume = max(0,min(1,global.AmbientMusicMaxVolume +.005));
                FMODGroupSetVolume(3,global.AmbientMusicMaxVolume );
        }
    else if(keyboard_check_pressed(ord('P')))
        {FMODGroupSetPaused(3,!FMODGroupGetPaused(3));}
    else if(keyboard_check_pressed(ord('M')))
        {FMODGroupSetMuted(3,!FMODGroupGetMuted(3));}
    else if(keyboard_check_pressed(ord('F')))
        if(FMODGroupGetVolume(3) = global.AmbientMusicMaxVolume )
        {
            FMODGroupFadeVolume(3,0,room_speed*2);
        }
        else
        {
            FMODGroupFadeVolume(3,global.AmbientMusicMaxVolume ,room_speed*2);
        }
    else if(keyboard_check_pressed(ord('B')))
        if(FMODGroupGetPitch(3) = 1)
        {
            FMODGroupFadePitch(3,.5,room_speed*2);
        }
        else
        {
            FMODGroupFadePitch(3,1,room_speed*2);
        }
    else if(keyboard_check_pressed(ord('A')))
        if(global.pans[3] = 1)
        {
            FMODGroupFadePan(3,global.pans[3],0,room_speed*2, "global.pans[3] = curpan");
        }
        else if(global.pans[3] = -1)
        {
            FMODGroupFadePan(3,global.pans[3],1,room_speed*2, "global.pans[3] = curpan");
        }
        else if(global.pans[3] = 0)
        {
            FMODGroupFadePan(3,global.pans[3],-1,room_speed*2, "global.pans[3] = curpan");
        }

}
if(keyboard_check(ord('4')))
{
    if(keyboard_check(vk_left))

        {
                global.AmbientEffectsMaxVolume = max(0,min(1,global.AmbientEffectsMaxVolume -.005));
                FMODGroupSetVolume(4,global.AmbientEffectsMaxVolume );
        }
    else if(keyboard_check(vk_right))
        {
                global.AmbientEffectsMaxVolume = max(0,min(1,global.AmbientEffectsMaxVolume +.005));
                FMODGroupSetVolume(4,global.AmbientEffectsMaxVolume );
        }
    else if(keyboard_check_pressed(ord('P')))
        {FMODGroupSetPaused(4,!FMODGroupGetPaused(4));}
    else if(keyboard_check_pressed(ord('M')))
        {FMODGroupSetMuted(4,!FMODGroupGetMuted(4));}
    else if(keyboard_check_pressed(ord('F')))
        if(FMODGroupGetVolume(4) = global.AmbientEffectsMaxVolume )
        {
            FMODGroupFadeVolume(4,0,room_speed*2);
        }
        else
        {
            FMODGroupFadeVolume(4,global.AmbientEffectsMaxVolume ,room_speed*2);
        }
    else if(keyboard_check_pressed(ord('B')))
        if(FMODGroupGetPitch(4) = 1)
        {
            FMODGroupFadePitch(4,.5,room_speed*2);
        }
        else
        {
            FMODGroupFadePitch(4,1,room_speed*2);
        }
    else if(keyboard_check_pressed(ord('A')))
        if(global.pans[4] = 1)
        {
            FMODGroupFadePan(4,global.pans[4],0,room_speed*2, "global.pans[4] = curpan");
        }
        else if(global.pans[4] = -1)
        {
            FMODGroupFadePan(4,global.pans[4],1,room_speed*2, "global.pans[4] = curpan");
        }
        else if(global.pans[4] = 0)
        {
            FMODGroupFadePan(4,global.pans[4],-1,room_speed*2, "global.pans[4] = curpan");
        }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!global.ShowDetails) exit;
if(mouse_y&lt;view_yview[view_current]) exit;
if(mouse_x&lt;view_xview[view_current]) exit;
if(mouse_y&gt;view_yview[view_current]+view_hview[view_current]) exit;
if(mouse_x&gt;view_xview[view_current]+view_wview[view_current]) exit;

if(alarm[0] &gt; 0) exit;

instance_create(mouse_x,mouse_y,DemoSoundObj);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_message("Crap1");
FMODAllStop();
if(room = DemoCarsBlockers)
{
    FMODBlockersFree();
    //show_message(FMODErrorStr(FMODGetLastError()));
}
//show_message("Crap2");</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_message(string(global.crash))
if(room = DemoCarsBlockers)
{
    FMODBlockersInit(instance_number(WallObj), room_width,room_height,0);
    FMODBlockersAddGMObjects(WallObj);
}
if(room = DemoEffect)
{
    instance_destroy();
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_message("Crap3");
FMODAllStop();
//show_message("Crap4");
FMODSoundFree(global.crash);
//show_message("Crap5");
FMODfree();
//show_message("Crap6");
UnloadFMOD();
//show_message("Crap7");</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
global.MasterMaxVolume = 1;
global.PriorityMaxVolume = 1;
global.EffectsMaxVolume = 1;
global.AmbientMusicMaxVolume = 1;
global.AmbientEffectsMaxVolume = 1;

LoadFMOD();
FMODinit(1000,0);
FMODSetWorldScale(.05)
FMODSetDopplerFPS(room_speed)

global.car2d = FMODSoundAdd("car\car1.wav",0,0);
FMODSoundSetMaxVolume(global.car2d,.4);
FMODSoundSetGroup(global.car2d ,4);

global.crash = FMODSoundAdd("car\crash.wav",true,false);
FMODSoundSetMaxVolume(global.crash,.5);
FMODSoundSet3dMinMaxDistance(global.crash,100,300);
FMODSoundSetGroup(global.crash ,4);



//Looped sound has it's own reference loaded, not an instance
//to prevent FMOD 50+ instance of same unstreamed sound limit bug

global.beep1 = FMODSoundAdd("car\beep1.wav",true,0);
FMODSoundSetMaxVolume(global.beep1,1);
FMODSoundSet3dMinMaxDistance(global.beep1,100,300);
FMODSoundSetGroup(global.beep1 ,4);


global.car1 = FMODSoundAdd("car\car1.wav",true,0);
FMODSoundSetMaxVolume(global.car1,.7);
FMODSoundSet3dMinMaxDistance(global.car1,100,300);
FMODSoundSetGroup(global.car1 ,4);

global.beep2 = FMODSoundAdd("car\beep2.wav",true,0);
FMODSoundSetMaxVolume(global.beep2,.5);
FMODSoundSet3dMinMaxDistance(global.beep2,100,300);
FMODSoundSetGroup(global.beep2 ,4);

global.car2 = FMODSoundAdd("car\car2.wav",true,0);
FMODSoundSetMaxVolume(global.car2,.7);
FMODSoundSet3dMinMaxDistance(global.car2,100,300);
FMODSoundSetGroup(global.car2 ,4);

global.beep3 = FMODSoundAdd("car\beep3.wav",true,0);
FMODSoundSetMaxVolume(global.beep3,.5);
FMODSoundSet3dMinMaxDistance(global.beep3,100,300);
FMODSoundSetGroup(global.beep3 ,4);

global.car3 = FMODSoundAdd("car\car3.wav",true,0);
FMODSoundSetMaxVolume(global.car3,.7);
FMODSoundSet3dMinMaxDistance(global.car3,100,300);
FMODSoundSetGroup(global.car3 ,4);

global.beep4 = FMODSoundAdd("car\beep4.wav",true,0);
FMODSoundSetMaxVolume(global.beep4,.5);
FMODSoundSet3dMinMaxDistance(global.beep4,100,300);
FMODSoundSetGroup(global.beep4 ,4);

global.car4 = FMODSoundAdd("car\car4.wav",true,0);
FMODSoundSetMaxVolume(global.car4,.8);
FMODSoundSet3dMinMaxDistance(global.car4,100,300);
FMODSoundSetGroup(global.car4 ,4);

global.police = FMODSoundAdd("car\police.wav",true,0);
FMODSoundSetMaxVolume(global.police,.7);
FMODSoundSet3dMinMaxDistance(global.police,100,800);
FMODSoundSetGroup(global.police ,4);

global.ShowDetails = false;


global.pitches[0] = 1;
global.pitches[1] = 1;
global.pitches[2] = 1;
global.pitches[3] = 1;
global.pitches[4] = 1;

global.volumes[0] = 1;
global.volumes[1] = 1;
global.volumes[2] = 1;
global.volumes[3] = 1;
global.volumes[4] = 1;

global.paused[0] = 0;
global.paused[1] = 0;
global.paused[2] = 0;
global.paused[3] = 0;
global.paused[4] = 0;

global.muted[0] = 0;
global.muted[1] = 0;
global.muted[2] = 0;
global.muted[3] = 0;
global.muted[4] = 0;

global.pans[0] = 0;
global.pans[1] = 0;
global.pans[2] = 0;
global.pans[3] = 0;
global.pans[4] = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(demofont)
draw_set_color(c_black);
draw_text( view_xview[0]+16,view_yview[0], "Count: " +string(FMODGetNumInstances())+" FPS:"+string(fps)+"/"+string(room_speed) +" Press Space to show/hide details. Press (N) For next room, Press (E) For Group Effect");


if(!global.ShowDetails) exit;


xx = view_xview[0]+16;
yy = view_yview[0]+16;


global.pitches[0] = FMODGroupGetPitch(0);
global.pitches[1] = FMODGroupGetPitch(1);
global.pitches[2] = FMODGroupGetPitch(2);
global.pitches[3] = FMODGroupGetPitch(3);
global.pitches[4] = FMODGroupGetPitch(4);

global.volumes[0] = FMODGroupGetVolume(0);
global.volumes[1] = FMODGroupGetVolume(1);
global.volumes[2] = FMODGroupGetVolume(2);
global.volumes[3] = FMODGroupGetVolume(3);
global.volumes[4] = FMODGroupGetVolume(4);

global.paused[0] = FMODGroupGetPaused(0);
global.paused[1] = FMODGroupGetPaused(1);
global.paused[2] = FMODGroupGetPaused(2);
global.paused[3] = FMODGroupGetPaused(3);
global.paused[4] = FMODGroupGetPaused(4);

global.muted[0] = FMODGroupGetMuted(0);
global.muted[1] = FMODGroupGetMuted(1);
global.muted[2] = FMODGroupGetMuted(2);
global.muted[3] = FMODGroupGetMuted(3);
global.muted[4] = FMODGroupGetMuted(4);

draw_healthbar(xx,yy,xx+200,yy+20,global.MasterMaxVolume*100,c_maroon,c_blue,c_blue,0,true,true)
draw_healthbar(xx+1,yy+2,xx+200,yy+18,global.volumes[0]*100,c_maroon,c_lime,c_lime,0,false,false)
DrawFreqp(xx,yy,200,20, global.pitches[0]);
draw_circle(xx+100+global.pans[0]*100,yy+10,6,false);
if(mouse_y&lt;yy+20)
    DrawSnapshotGroup(0,xx,yy,200,20);
yy+=21;
draw_healthbar(xx,yy,xx+200,yy+20,global.PriorityMaxVolume*100,c_maroon,c_blue,c_blue,0,true,true)
draw_healthbar(xx+1,yy+2,xx+200,yy+18,global.volumes[1]*global.volumes[0]*100,c_maroon,c_lime,c_lime,0,false,false)
DrawFreqp(xx,yy,200,20, global.pitches[0]*global.pitches[1]);
draw_circle(xx+100+global.pans[1]*100,yy+10,6,false);
if(mouse_y&lt;yy+20)
    DrawSnapshotGroup(1,xx,yy,200,20);
yy+=21;
draw_healthbar(xx,yy,xx+200,yy+20,global.EffectsMaxVolume*100,c_maroon,c_blue,c_blue,0,true,true)
draw_healthbar(xx+1,yy+2,xx+200,yy+18,global.volumes[2]*global.volumes[0]*100,c_maroon,c_lime,c_lime,0,false,false)
DrawFreqp(xx,yy,200,20, global.pitches[0]*global.pitches[2]);
draw_circle(xx+100+global.pans[2]*100,yy+10,6,false);
if(mouse_y&lt;yy+20)
    DrawSnapshotGroup(2,xx,yy,200,20);
yy+=21;
draw_healthbar(xx,yy,xx+200,yy+20,global.AmbientMusicMaxVolume*100,c_maroon,c_blue,c_blue,0,true,true)
draw_healthbar(xx+1,yy+2,xx+200,yy+18,global.volumes[3]*global.volumes[0]*100,c_maroon,c_lime,c_lime,0,false,false)
DrawFreqp(xx,yy,200,20, global.pitches[0]*global.pitches[3]);
draw_circle(xx+100+global.pans[3]*100,yy+10,6,false);
if(mouse_y&lt;yy+20)
    DrawSnapshotGroup(3,xx,yy,200,20);
yy+=21;
draw_healthbar(xx,yy,xx+200,yy+20,global.AmbientEffectsMaxVolume *100,c_maroon,c_blue,c_blue,0,true,true)
draw_healthbar(xx+1,yy+2,xx+200,yy+18,global.volumes[4]*global.volumes[0]*100,c_maroon,c_lime,c_lime,0,false,false)
DrawFreqp(xx,yy,200,20, global.pitches[0]*global.pitches[4]);
draw_circle(xx+100+global.pans[4]*100,yy+10,6,false);
if(mouse_y&lt;yy+20)
    DrawSnapshotGroup(4,xx,yy,200,20);
yy+=21;
draw_text(xx,yy,"Click items to modify. Click background to add new sound");
draw_set_color(c_black);
xx = view_xview[0]+16+208;
yy = view_yview[0]+16;
draw_set_color(c_maroon);
draw_text(xx,yy,"Master");
draw_text(xx+100,yy,"(0) + (&lt;-)MaxVol(-&gt;), (P)ause, (M)ute, (F)ade, (B)ullet Time, p(A)n");
yy+=21;
draw_set_color(c_red);
draw_text(xx,yy,"Priority");
draw_text(xx+100,yy,"(1) + (&lt;-)MaxVol(-&gt;), (P)ause, (M)ute, (F)ade, (B)ullet Time, p(A)n");
yy+=21;
draw_set_color(c_green);
draw_text(xx,yy,"Effects");
draw_text(xx+100,yy,"(2) + (&lt;-)MaxVol(-&gt;), (P)ause, (M)ute, (F)ade, (B)ullet Time, p(A)n");
yy+=21;
draw_set_color(c_blue);
draw_text(xx,yy,"Ambient Music");
draw_text(xx+100,yy,"(3) + (&lt;-)MaxVol(-&gt;), (P)ause, (M)ute, (F)ade, (B)ullet Time, p(A)n");
yy+=21;
draw_set_color(c_yellow);
draw_text(xx,yy,"Ambient Effects");
draw_text(xx+100,yy,"(4) + (&lt;-)MaxVol(-&gt;), (P)ause, (M)ute, (F)ade, (B)ullet Time, p(A)n");

draw_set_color(c_black);

draw_set_alpha(.3);
xx = view_xview[0]+16;
yy = view_yview[0]+16;
if(global.paused[0])
{
draw_rectangle_color(xx,yy,xx+200,yy+21,c_blue,c_blue,c_blue,c_blue,false);
draw_text(xx,yy,"Paused")
}
yy+=21;
if(global.paused[1])
{
draw_rectangle_color(xx,yy,xx+200,yy+21,c_blue,c_blue,c_blue,c_blue,false);
draw_text(xx,yy,"Paused")
}
yy+=21;
if(global.paused[2])
{
draw_rectangle_color(xx,yy,xx+200,yy+21,c_blue,c_blue,c_blue,c_blue,false);
draw_text(xx,yy,"Paused")
}
yy+=21;
if(global.paused[3])
{
draw_rectangle_color(xx,yy,xx+200,yy+21,c_blue,c_blue,c_blue,c_blue,false);
draw_text(xx,yy,"Paused")
}
yy+=21;
if(global.paused[4])
{
draw_rectangle_color(xx,yy,xx+200,yy+21,c_blue,c_blue,c_blue,c_blue,false);
draw_text(xx,yy,"Paused")
}
yy+=21;

xx = view_xview[0]+16;
yy = view_yview[0]+16;
if(global.muted[0])
{
draw_rectangle_color(xx,yy,xx+200,yy+21,c_blue,c_red,c_red,c_blue,false);
draw_text(xx,yy,"Muted")
}
yy+=21;
if(global.muted[1])
{
draw_rectangle_color(xx,yy,xx+200,yy+21,c_blue,c_red,c_red,c_blue,false);
draw_text(xx,yy,"Muted")
}
yy+=21;
if(global.muted[2])
{
draw_rectangle_color(xx,yy,xx+200,yy+21,c_blue,c_red,c_red,c_blue,false);
draw_text(xx,yy,"Muted")
}
yy+=21;
if(global.muted[3])
{
draw_rectangle_color(xx,yy,xx+200,yy+21,c_blue,c_red,c_red,c_blue,false);
draw_text(xx,yy,"Muted")
}
yy+=21;
if(global.muted[4])
{
draw_rectangle_color(xx,yy,xx+200,yy+21,c_blue,c_red,c_red,c_blue,false);
draw_text(xx,yy,"Muted")
}
yy+=21;

draw_set_alpha(1);
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="78">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room_exists(room_next(room))) 
    room_goto_next();
else
    room_goto(room_first);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var opt; opt = show_message("Do you want to add(Yes) or remove(No) a group effect?");

if(opt = 1)
{
var group; group = get_integer("Enter group to add effect to. 0,1,2,3,4",0);
group = max(0,min(4,group));

    var eff;
    eff = get_integer("FMOD Effects: NONE - 0, FMOD_DSP_TYPE_MIXER-1, FMOD_DSP_TYPE_OSCILLATOR-2, FMOD_DSP_TYPE_LOWPASS-3#FMOD_DSP_TYPE_ITLOWPASS-4, FMOD_DSP_TYPE_HIGHPASS-5, FMOD_DSP_TYPE_ECHO-6#FMOD_DSP_TYPE_FLANGE-7, FMOD_DSP_TYPE_DISTORTION-8, FMOD_DSP_TYPE_NORMALIZE-9#FMOD_DSP_TYPE_PARAMEQ-10, FMOD_DSP_TYPE_PITCHSHIFT-11, FMOD_DSP_TYPE_CHORUS-12#FMOD_DSP_TYPE_REVERB-13, FMOD_DSP_TYPE_VSTPLUGIN-14, FMOD_DSP_TYPE_WINAMPPLUGIN-15#FMOD_DSP_TYPE_ITECHO-16, FMOD_DSP_TYPE_COMPRESSOR-17, FMOD_DSP_TYPE_SFXREVERB-18#FMOD_DSP_TYPE_LOWPASS_SIMPLE-19",0);
    if(eff = 0) exit;
    m_effects[group,m_NumEffect[group]] = FMODGroupAddEffect(group,eff);
    m_NumEffect[group] +=1;

}
else
{
var group; group = get_integer("Enter group to remove last effect. 0,1,2,3,4",0);
group = max(0,min(4,group));
if(m_NumEffect[group]&lt;=0) exit;
FMODEffectFree(m_effects[group,m_NumEffect[group]-1]);
m_NumEffect[group] -=1;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.ShowDetails = !global.ShowDetails</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
